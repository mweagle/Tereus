import java.sql.DriverManager

// http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
plugins {
    id 'java'
    id 'idea'
    id 'findbugs'
}

sourceSets {
    test {
        java {
            exclude '**/gradlebuild/src/main/**'
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// Support CLI, Travis, IntelliJ setup
def ENVIRONMENT = System.getenv()
def BUILD_DIR = System.getenv("TRAVIS_BUILD_DIR") ?: "."

println(System.properties);

def NODE_HOME = System.getProperty("NODE_HOME") ?: ""
println("NODE_HOME property: $NODE_HOME")

def NODE_BIN_PATH = "$NODE_HOME" ? "$NODE_HOME/bin" : ""
def NPM_PATH = "$NODE_BIN_PATH" ? "$NODE_BIN_PATH/npm" : "npm"
def NODE_PATH = "$NODE_BIN_PATH" ? "$NODE_BIN_PATH/node" : "node"
println("npm PATH: $NPM_PATH")

def GRADLE_HOME = System.getProperty("GRADLE_HOME") ?: ""
def GRADLE_BIN_PATH = !"$GRADLE_HOME".isEmpty() ? "$GRADLE_HOME/bin" : "gradle"
println("gradle PATH: $GRADLE_BIN_PATH")

def GRADLE_PATH=ENVIRONMENT["PATH"] + ":$NODE_BIN_PATH:$GRADLE_BIN_PATH"

println "Gradle task:Exec PATH: $GRADLE_PATH"
///////////////////////////////////////////////////////////////////////////////
defaultTasks = ['clean', 'jar']

repositories {
    mavenCentral()
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}
//Project dependencies
dependencies {
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudformation', version: '1.10.20'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.10.20'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-iam', version: '1.10.20'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    compile group: 'io.airlift', name: 'airline', version: '0.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.2'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
}

task devStart(type: Exec) {
    workingDir "$BUILD_DIR/src/main/resources/web"
    commandLine "$NPM_PATH", 'run-script', 'start'
}

task nodeVersion(type:Exec) {
    environment ("PATH", "$GRADLE_PATH")
    commandLine "$NODE_PATH", "--version"
}

task npmVersion(type: Exec, dependsOn: 'nodeVersion')  {
    environment ("PATH", "$GRADLE_PATH")
    commandLine "$NPM_PATH", "-version"
}

task npmInstallBindings(type: Exec, dependsOn: 'npmVersion') {
    environment ("PATH", "$GRADLE_PATH")
    workingDir "$BUILD_DIR/src/main/resources/bindings"
    commandLine  "$NPM_PATH", 'install'
}

task docsBuild(type: Exec, dependsOn: 'npmInstallBindings') {
    environment ("PATH", "$GRADLE_PATH")
    workingDir "$BUILD_DIR/src/main/resources/bindings"
    commandLine  "$NPM_PATH", 'run-script', 'docs'
}

task npmInstallUI(type: Exec, dependsOn: 'npmVersion') {
    environment ("PATH", "$GRADLE_PATH")
    workingDir "$BUILD_DIR/src/main/resources/web"
    commandLine  "$NPM_PATH", 'install'
}

task uiBuild(type: Exec, dependsOn: 'npmInstallUI') {
    environment ("PATH", "$GRADLE_PATH")
    workingDir "$BUILD_DIR/src/main/resources/web"
    commandLine  "$NPM_PATH", 'run-script', 'build'
}

processResources.dependsOn docsBuild
processResources.dependsOn uiBuild

jar {
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

    manifest {
        attributes("Implementation-Title": "Gradle", "Main-Class": "com.mweagle.Tereus")
    }
    // Exclude node_modules that don't have secondary resources
    exclude('web/node_modules/.bin/**/*')
    exclude('web/node_modules/async/**/*')
    exclude('web/node_modules/browserify/**/*')
    exclude('web/node_modules/browser-storage/**/*')
    exclude('web/node_modules/classnames/**/*')
    exclude('web/node_modules/envify/**/*')
    exclude('web/node_modules/flux/**/*')
    exclude('web/node_modules/jest-cli/**/*')
    exclude('web/node_modules/jquery/**/*')
    exclude('web/node_modules/keymirror/**/*')
    exclude('web/node_modules/object-assign/**/*')
    exclude('web/node_modules/react/**/*')
    exclude('web/node_modules/react-highlight/**/*')
    exclude('web/node_modules/reactify/**/*')
    exclude('web/node_modules/uglify-js/**/*')
    exclude('web/node_modules/underscore/**/*')
    exclude('web/node_modules/watchify/**/*')
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    workingDir "$BUILD_DIR/"
    environment ("PATH", "$GRADLE_PATH")

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("-------------------------------------------------------------------------------")
        logger.lifecycle("TEST: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
        showCauses true
        showExceptions true
    }
}
